#!/bin/bash
###############################################################################
###### File name   : build_tools                                         ######
###### Author      :                                                     ######
###### Description : To build the UVP Tools for Linux distribution.      ######
###### History     :                                                     ######
######               2012-02-24: Create the file                         ######
######               2012-09-04: To support multi kernels in an OS,      ######
######               2012-12-24: Rename this script                      ######
######                              build_xenpv -> build_tools           ######
######               2013-01-19: To support the PV OPS VMs               ######
###############################################################################

# UVP Tools name & version
PACKAGE_NAME="uvp-tools-linux-for-HANA"
UVP_TOOLS_VERSION=""

# The target OS distribution in detail, such as rhel-5_series.
OS_RELEASE=""
OS_DIST=""
OS_DIST_SRC=""

# UVP-tools sources absolute path for linux.
DEV_CUR_DIR="`pwd`"
UVP_TOOLS_DIR=""
UVP_TOOLS_VER=""
CI_TAG_VER="2."

# Linux tools sources path.
DRV_SRC_DIR="`pwd`/uvp-xenpv"

KERN_VER="`uname -r`"
CPU_ARCH="`uname -m`"
SYS_BIT=""

# Prompt
BUILD_LOG="build_tools_"
BUILD_WARN="[ Warning ] ---"
BUILD_ERR="[ Error ] ---"
OPT_PARAMETER=""

case "$CPU_ARCH" in
    i[3456789]86|x86)
        SYS_BIT="32"
        ;;
    x86_64|amd64)
        SYS_BIT="64"
        ;;
    *)
        echo "$CPU_ARCH has been not supported!"
        exit
esac

# help
usage()
{
    echo "Usage: `basename $0` "
    echo "       Build the PV Drivers and uvp-monitor. "
    echo "       -b make all. "
    echo "       -c make clean. "
}

# 
get_os_release()
{
    if [ -f /etc/redhat-release ]; then
        if [ "Fedora" == `cat /etc/redhat-release | awk -F" " '{print $1}'` ]; then
            OS_RELEASE="Fedora"
        else
            OS_RELEASE="redhat"
        fi
    elif [ -f /etc/SuSE-release ]; then
        if [ "openSUSE" == `cat /etc/SuSE-release | awk -F" " 'NR==1 {print $1}'` ]; then
            OS_RELEASE="openSUSE"
        else
            OS_RELEASE="suse"
        fi
    elif [ -f /etc/debian_version ]; then
        OS_RELEASE="`cat /etc/issue | awk -F" " '{print $1}'`"
    elif [ -f /etc/gentoo-release ]; then
        OS_RELEASE="Gentoo"
    else
        OS_RELEASE="unknown"
    fi
}

get_os_distribution_info()
{
    local ver_os_rel=""
    
    get_os_release
    
    if [ "suse" = ${OS_RELEASE} ]; then
        ver_os_rel="`cat /etc/SuSE-release | awk -F" " 'NR==1 {print $5}'`"
        OS_DIST="SLES${ver_os_rel}"
        if [ "SLES11" = "${OS_DIST}" ]; then
            OS_DIST_SRC="uvp-classic_xen_driver-2.6.32to3.0.x"
        elif [ "SLES12" = "${OS_DIST}" ]; then
            OS_DIST_SRC="uvp-classic_xen_driver-3.12.xto3.16.x"
        else
            echo "Sorry, this Operating System could not support!"
            exit 1
        fi
    fi
}

backup_virtio_headers()
{
    local hacking_ops=$1

    if [ "b" = "${hacking_ops}" ]
    then
        rename virtio VIRTIO virtio*  1>/dev/null 2>&1
    elif [ "c" = "${hacking_ops}" ]
    then
        rename VIRTIO virtio VIRTIO*  1>/dev/null 2>&1
    fi
}

build_xenpv()
{
    local build_ops=$1
    local kern_ver=$2
    local kern_dir="/lib/modules/$kern_ver/build"
    local mod_dir="${UVP_TOOLS_DIR}/lib/modules/xvf-${kern_ver}-${CPU_ARCH}-${OS_DIST}/"
    local mod_with_dir=""
    local virtiohead=""

    if [ "suse" == "${OS_RELEASE}" ]; then
        virtiohead="/lib/modules/${kern_ver}/source/include/linux/"
    else
        echo "This os type can not build xenpv."
    fi
    cd . > /dev/null 2>&1
    cd ${virtiohead} > /dev/null 2>&1
    backup_virtio_headers $build_ops  > /dev/null 2>&1
    cd -
    
    cd ${DRV_SRC_DIR}/${OS_DIST_SRC}
    
    if [ 'b' == ${build_ops} ]; then
        mkdir -p ${mod_dir}
        make all KERNDIR=${kern_dir} BUILDKERNEL=$(uname -r) CONFIG_DEBUG_SECTION_MISMATCH=y -s \
                                2>> ${BUILD_LOG}${OS_DIST}_xenpv.log
        mod_with_dir="`find -name *.ko`"
        for mod_xenpv in ${mod_with_dir}
        do
            cp --parents ${mod_xenpv} ${mod_dir}
        done
    elif [ 'c' == ${build_ops} ]; then
        make clean KERNDIR=${kern_dir} BUILDKERNEL=$(uname -r) -s
    else
        echo "${BUILD_WARN} bad parameter, please show help."
    fi
    
    cd -
}

build_xenpv_alldist()
{
    local build_ops=$1
    local del_illegal_kern=""
    
    for kernel in `ls /lib/modules/`
    do
        # When in the RHEL4 should not build the illegal kernel. ex. kabi-4.0.0/kabi-4.0.0smp
        del_illegal_kern="`echo ${kernel} | awk -F"." '{print $1}'`"
        standard_kern="`uname -r | awk -F"." '{print $1}'`"
        if [ "${standard_kern}" != "${del_illegal_kern}" ]; then
        	continue
        fi
        echo "Starting to compile ${kernel} in the ${OS_DIST}: "
        build_xenpv ${build_ops} ${kernel}
        build_xenpv 'c' ${kernel}
    done
}

hacking_driver_ver()
{
    local mode_info=$1
    local ver_file=$2
    local base_ver_line=$(grep -n "MODULE_VERSION" ${ver_file} | head -1 | awk -F":" '{print $1}')
    local hack_kver=$(cat "${DRV_SRC_DIR}/${osdir}/version.ini" | grep -w KernModeVersion | awk -F"=" '{print $2}')
    local hack_uver=$(cat "${DRV_SRC_DIR}/${osdir}/version.ini" | grep -w UserModeVersion | awk -F"=" '{print $2}')

    if [ "X" = "X${base_ver_line}" ]
    then
        #MODULE_VERSION("1");
        if [ "kern" = "${mode_info}" ]
        then
            echo "MODULE_VERSION(\"${hack_kver}\");" >> ${ver_file}
        else
            echo "MODULE_VERSION(\"${hack_uver}\");" >> ${ver_file}
        fi
    else
        base_ver=$(cat ${ver_file} | grep -w MODULE_VERSION | awk -F"\"" '{print $2}')
        if [ "kern" = "${mode_info}" ]
        then
            sed -i "${base_ver_line}s;${base_ver};${hack_kver};" ${ver_file}
        else
            sed -i "${base_ver_line}s;${base_ver};${hack_uver};" ${ver_file}
        fi
    fi
}

get_kernel_modules()
{
    local dir_support_scripts="$UVP_TOOLS_DIR/bin"
    local dir_offline_support="$UVP_TOOLS_DIR/bin/offline"

    cp -af $DEV_CUR_DIR/bin/get_uvp_kernel_modules $dir_support_scripts
    chmod 544 ${dir_support_scripts}/get_uvp_kernel_modules
}

build_tools()
{
    local build_ops=$1
    local ver_file="${DEV_CUR_DIR}/version.ini"
    
    get_os_distribution_info
    UVP_TOOLS_VER="`cat ${ver_file} | awk -F"=" 'NR==1 {print $2}'`"
    
    UVP_TOOLS_DIR="${DEV_CUR_DIR}/${PACKAGE_NAME}-${CI_TAG_VER}${UVP_TOOLS_VER}"
    
    
    mkdir -p ${UVP_TOOLS_DIR}
    mkdir -p $UVP_TOOLS_DIR/bin 2>/dev/null

    build_xenpv_alldist ${build_ops}
    get_kernel_modules

    ###
    # To compress the Linux PV Driver into an iso
    ###
    cp -f ${DEV_CUR_DIR}/install ${UVP_TOOLS_DIR}

    first_line="$(sed -n '/^\s*[^#]/=' ${UVP_TOOLS_DIR}/install  | sed -n '1p')"
    version_info="$(cat ${ver_file} | grep UVPToolsVersion | sed 's;UVPToolsVersion;INSTALL_VERSION;g')"
    driver_info="$(cat ${ver_file} | grep DriverVersion | awk -F"-" '{print $1}' | sed 's;DriverVersion;DRIVER_VERSION;g')"
    sed -i "${first_line} i${version_info}\n${driver_info}" "${UVP_TOOLS_DIR}/install"
    chmod 744 ${UVP_TOOLS_DIR}/install

    find ${UVP_TOOLS_DIR} -name .svn | xargs rm -rf
}

clean_tools()
{
    local build_ops=$1

    rm -rf ${PACKAGE_NAME}*
}

for i in `ls`
do 
    ret=$(file $i | grep text)
    if [ -n "$ret" ]
    then 
        dos2unix $i 2>/dev/null
    fi
done

while getopts "bc" options;
do
    case $options in
    b)
        OPT_PARAMETER='b'
        build_tools $OPT_PARAMETER
        ;;
    c)
        OPT_PARAMETER='c'
        clean_tools $OPT_PARAMETER
        ;;
    *)
        usage
        exit 0
        ;;
    esac
done

